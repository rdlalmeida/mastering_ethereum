{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "doStuff",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x176ae205c22b2f6de49de64ac03da5387da57cd9deb0ea972103eccbeb57b703",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "226940",
    "logsBloom": "0x
    "blockHash": "0x24f3ee4ac853f4f39dbf77c5f600cca74be9884182160f38696026c177b6004d",
    "transactionHash": "0x176ae205c22b2f6de49de64ac03da5387da57cd9deb0ea972103eccbeb57b703",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "226940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95f865ea118ea9a7ab66dc6d3fed65a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"doStuff\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FunWithStorage.sol\":\"FunWithStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FunWithStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ncontract FunWithStorage {\\n    uint256 favoriteNumber;                         // Stored at slot 0\\n    bool someBool;                                  // Stored at slot 1\\n    uint256[] myArray;                              /* Array Lenght stored at slot 2, but the object will be the keccak256(2), since \\n                                                    2 is the storage slot of the array */\\n    mapping(uint256 => bool) myMap;                 /* An empty slot is held at slot 3 and the elements will be stored at keccak256(h(k) . p) \\n    \\n    p: The storage slot (aka, 3)\\n    k: The key in hex\\n    h: Some function based on the type. For uint256, it just pads the hex\\n    */\\n    uint256 constant NOT_IN_STORAGE = 123;\\n    uint256 immutable i_not_in_storage;\\n\\n    constructor() {\\n        favoriteNumber = 25;                        // See stored spot above // SSTORE\\n        someBool = true;                            // See stored spot above // SSTORE\\n        myArray.push(222);                          // SSTORE\\n        myMap[0] = true;                            // SSTORE\\n        i_not_in_storage = 123;\\n    }\\n\\n    function doStuff() view public {\\n        uint256 newVar = favoriteNumber + 1;        // SLOAD\\n        bool otherVar = someBool;                   // SLOAD\\n        // ^^ memory variables\\n\\n        otherVar ? newVar + 1 : newVar + 2;\\n    }\\n}\",\"keccak256\":\"0x39e4aa82daee64a7bc71698cc88d9f91a3d3f9f19eec8723cc54b7ce08e008ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50601960008190555060018060006101000a81548160ff021916908315150217905550600260de908060018154018082558091505060019003906000526020600020016000909190919091505560016003600080815260200190815260200160002060006101000a81548160ff021916908315150217905550607b6080818152505060805161011a6100aa6000396000505061011a6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063874f33a114602d575b600080fd5b60336035565b005b600060016000546044919060b7565b90506000600160009054906101000a900460ff16905080606d576002826069919060b7565b6079565b6001826078919060b7565b5b505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060c082607e565b915060c983607e565b925082820190508082111560de5760dd6088565b5b9291505056fea2646970667358221220f0ac09070b0773866e0c6931682e2bbdee276403c69a394328d12c10c8fa15fb64736f6c63430008180033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063874f33a114602d575b600080fd5b60336035565b005b600060016000546044919060b7565b90506000600160009054906101000a900460ff16905080606d576002826069919060b7565b6079565b6001826078919060b7565b5b505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060c082607e565b915060c983607e565b925082820190508082111560de5760dd6088565b5b9291505056fea2646970667358221220f0ac09070b0773866e0c6931682e2bbdee276403c69a394328d12c10c8fa15fb64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/FunWithStorage.sol:FunWithStorage",
        "label": "favoriteNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5,
        "contract": "contracts/FunWithStorage.sol:FunWithStorage",
        "label": "someBool",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/FunWithStorage.sol:FunWithStorage",
        "label": "myArray",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12,
        "contract": "contracts/FunWithStorage.sol:FunWithStorage",
        "label": "myMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}